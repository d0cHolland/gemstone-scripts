@lockpickContainer = "case"
@boxTypes = ['box', 'coffer', 'strongbox', 'chest', 'trunk']
@rightHand = checkright
$openMsgs = /Then...CLICK!  It opens!|It does not appear to be locked|the tumblers snap open/
$failedMsgs = /but you get a feeling that it is within your abilities.|and learn little about it./
$brokeMsgs = /\* SNAP \*  Crud!  You broke your lockpick in the attempt!/
$rollMsgs = /You make an? (.*) attempt \(d100=(\d+)\)./
$resultMsgs = Regexp.union($openMsgs, $failedMsgs, $brokeMsgs, $rollMsgs)
$customer = nil;	

#((Picking Locks skill + Dexterity bonus) * Pick modifier) + lock difficulty (negative number) + d100 roll
def get_lockpick()
	waitrt?
	echo "Get your lockpick and unpause the script";
	pause_script;
end


def disarm()
	echo "Unpause once you've successfully disarmed the box."
	pause_script;
end

def stow_lockpick()
	waitrt?
	fput "put left in my case"
end

def stow_broken_lockpick()
	waitrt?
	fput "put left in my kit";
end


def pick_lock()
	waitrt?	
	roll = nil;
	diff = nil;
	fput "lm pt spin right"
	
	while line = get
		if line =~ $rollMsgs
			roll = $1;
		elsif line =~ $openMsgs
			return;
		elsif line =~ $brokeMsgs		
			stow_broken_lockpick()
			echo "Get Another Lockpick"
			pause_script
			pick_lock()
		elsif line =~ failedMsgs
			echo "Maybe get Another Lockpick"
			pause_script
			pick_lock()
		end
	end
end


def offer_box()
	result = dothistimeout "give #{$customer} right", 10, /has accepted your offer/
	if result =~ /has accepted your offer/
		return;
	else
		echo "Waiting for customer to accept box".
		pause_script;
	end
end

def routine()
	disarm();
	get_lockpick();
	pick_lock();
	stow_lockpick();
	offer_box() if $working_for =~ /other/
end

def wait_for_offer
	loop{
		waitfor "offers you a"
		fput "accept"
		while line = get
			if line =~ /^You accept ([a-zA-Z]+)\'s offer and are now holding.*\.$/i
				$customer = $1
				disarm();
				get_lockpick();			
			end
		end
	}
end

if variable[1] =~ /other/
	wait_for_offer();
else
	routine();
end
# if (@rightHand.nil?)
	# respond "Pick what?"
	# abort!
# elsif not @boxTypes.include? @rightHand
	# respond "You can't pick a " + @rightHand + "!";
	# abort!
# elsif not ("lockpick" == checkleft)
	# if variable[1].nil?
		# respond "No lockpick specified."
		# exit	
	# else 
		
		# result = fput "get my " + variable[1] + " lockpick from my " + @lockpickContainer
		# if result == "Get What?"
			# exit
		# end
		# pickbox()
		# if(!variable[2].nil?)
			# fput "give #{variable[2]}"
		# else
			# fput "open #{@rightHand}"
		# end
	# end
# else
	# pickbox()	
# end
